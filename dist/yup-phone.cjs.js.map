{"version":3,"file":"yup-phone.cjs.js","sources":["../src/yup-phone.ts"],"sourcesContent":["import * as Yup from 'yup';\nimport gPhoneNumber from 'google-libphonenumber';\n\nconst phoneUtil = gPhoneNumber.PhoneNumberUtil.getInstance();\n\ndeclare module 'yup' {\n  export interface StringSchema {\n    phone(countryCode?: string, strict?: boolean): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = 'phone';\nconst CLDR_REGION_CODE_SIZE = 2;\n\nconst isValidCountryCode = (countryCode: any): boolean =>\n  typeof countryCode === 'string' &&\n  countryCode.length === CLDR_REGION_CODE_SIZE;\n\nYup.addMethod(Yup.string, YUP_PHONE_METHOD, function yupPhone(\n  countryCode?: string,\n  strict: boolean = false,\n) {\n  const errMsg = isValidCountryCode(countryCode)\n    ? `\\${path} must be a valid phone number for region ${countryCode}`\n    : '${path} must be a valid phone number.';\n  // @ts-ignore\n  return this.test(YUP_PHONE_METHOD, errMsg, (value: string) => {\n    if (!isValidCountryCode(countryCode)) {\n      // if not valid countryCode, then set default country to India (IN)\n      countryCode = 'IN';\n      strict = false;\n    }\n\n    try {\n      const phoneNumber = phoneUtil.parseAndKeepRawInput(value, countryCode);\n\n      if (!phoneUtil.isPossibleNumber(phoneNumber)) {\n        return false;\n      }\n\n      const regionCodeFromPhoneNumber = phoneUtil.getRegionCodeForNumber(\n        phoneNumber,\n      );\n\n    /* check if the countryCode provided should be used as\n       default country code or strictly followed\n     */\n      return strict\n      ? phoneUtil.isValidNumberForRegion(phoneNumber, countryCode)\n      : phoneUtil.isValidNumberForRegion(\n        phoneNumber,\n        regionCodeFromPhoneNumber,\n        );\n    } catch {\n      return false;\n    }\n  });\n});\n"],"names":["phoneUtil","gPhoneNumber","PhoneNumberUtil","getInstance","YUP_PHONE_METHOD","CLDR_REGION_CODE_SIZE","isValidCountryCode","countryCode","length","Yup.addMethod","Yup.string","yupPhone","strict","errMsg","test","value","phoneNumber","parseAndKeepRawInput","isPossibleNumber","regionCodeFromPhoneNumber","getRegionCodeForNumber","isValidNumberForRegion"],"mappings":"2LAGMA,UAAYC,YAAAC,gBAAAC,YAAA,GAQZC,iBAAmB,QACnBC,sBAAwB,EAExBC,mBAAqBA,QAAA,CAACC,CAAD,QACF,WAAvB,MAAOA,IACPA,CAAAC,UAAuBH,sBAEzBI;GAAAA,UAAAA,CAAcC,GAAAA,OAAdD,CAA0BL,gBAA1BK,CAA4CE,QAAA,CAC1CJ,CAD0C,CAE1CK,CAF0C,CAEnB,UAAvBA,IAAAA,EAAkB,CAAA,OAEZC,EAASP,kBAAA,CAAmBC,CAAnB,CAAA,mDAAA,CACyCA,CADzC,CAEX,8CAEG,KAAAO,KAAA,CAAUV,gBAAV,CAA4BS,CAA5B,CAAoC,SAACE,EAAiB,CACtDT,kBAAA,CAAmBC,CAAnB,IAEHA,CACA,CADc,IACd,CAAAK,CAAA,CAAS,CAAA,MAGP,KACII,EAAchB,SAAAiB,qBAAA,CAA+BF,CAA/B,CAAsCR,CAAtC,KAEhB,CAACP,SAAAkB,iBAAA,CAA2BF,CAA3B,QACI,CAAA,MAGHG,EAA4BnB,SAAAoB,uBAAA,CAChCJ,CADgC,QAO3BJ,EAAA,CACLZ,SAAAqB,uBAAA,CAAiCL,CAAjC,CAA8CT,CAA9C,CADK,CAELP,SAAAqB,uBAAA,CACAL,CADA,CAEAG,CAFA,CAhBA,CAoBF,OAAA,CAAM,OACC,CAAA,CADD,CA3BmD,CAAtD,CANgB,CAFzBV;"}